{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Intent","intent","index","removeIntent","className","raw","Button","variant","onClick","FormIntent","addIntent","React","useState","value","setValue","Form","onSubmit","e","preventDefault","Group","Label","Control","type","onChange","target","placeholder","App","state","setState","refreshIntents","fetch","then","res","json","newTodos","todos","splice","text","method","body","JSON","stringify","headers","map","item","Card","Body","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAMA,SAASA,EAAT,GAAkD,IAAhCC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,aAC/B,OACE,sBACEC,UAAU,SADZ,UAIE,+BAAOH,EAAOI,MACd,8BACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,iBAAiBC,QAAS,kBAAML,EAAaD,IAA7D,yBAMR,SAASO,EAAT,GAAoC,IAAdC,EAAa,EAAbA,UAAa,EACPC,IAAMC,SAAS,IADR,mBAC1BC,EAD0B,KACnBC,EADmB,KAUjC,OACE,eAACC,EAAA,EAAD,CAAMC,SARa,SAAAC,GACnBA,EAAEC,iBACGL,IACLH,EAAUG,GACVC,EAAS,MAIT,UACA,eAACC,EAAA,EAAKI,MAAN,WACE,cAACJ,EAAA,EAAKK,MAAN,UAAY,mFACZ,cAACL,EAAA,EAAKM,QAAN,CAAcC,KAAK,OAAOlB,UAAU,QAAQS,MAAOA,EAAOU,SAAU,SAAAN,GAAC,OAAIH,EAASG,EAAEO,OAAOX,QAAQY,YAAY,kBAEjH,cAACnB,EAAA,EAAD,CAAQC,QAAQ,eAAee,KAAK,SAApC,uBA4DWI,MArDf,WAAgB,IAAD,EACaf,IAAMC,SAAS,IAD5B,mBACNe,EADM,KACCC,EADD,KAIPC,EAAiB,WACrBC,MAAM,YACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,KAAKH,IAYJzB,EAAe,SAAAD,GACnB,IAAMgC,EAAQ,YAAOC,OACrBD,EAASE,OAAOlC,EAAO,GACvB0B,EAASM,IAIX,OADAL,IAEE,qBAAKzB,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,mBAAd,uBACA,0EACA,uIACA,mEACA,cAACK,EAAD,CAAYC,UAvBA,SAAA2B,GAChBP,MAAM,UAAW,CACfQ,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAE,OAAUJ,IACjCK,QAAS,CAAE,eAAgB,sBAE1BX,MAAK,SAAAC,GAAG,OAAIH,UAkBX,8BACGF,EAAMgB,KAAI,SAACC,EAAM1C,GAAP,OACT,cAAC2C,EAAA,EAAD,UACE,cAACA,EAAA,EAAKC,KAAN,UACE,cAAC9C,EAAD,CAEAE,MAAOA,EACPD,OAAQ2C,EACRzC,aAAcA,GAHTD,kBCtEN6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9c1fc1b3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { Button, Card, Form } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction Intent({ intent, index, removeIntent }) {\n  return (\n    <div\n      className=\"intent\"\n      \n    >\n      <span>{intent.raw}</span>\n      <div>\n        <Button variant=\"outline-danger\" onClick={() => removeIntent(index)}>✕</Button>\n      </div>\n    </div>\n  );\n}\n\nfunction FormIntent({ addIntent }) {\n  const [value, setValue] = React.useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    addIntent(value);\n    setValue(\"\");\n  };\n\n  return (    \n    <Form onSubmit={handleSubmit}> \n    <Form.Group>\n      <Form.Label><b>Добавить</b></Form.Label>\n      <Form.Control type=\"text\" className=\"input\" value={value} onChange={e => setValue(e.target.value)} placeholder=\"Я ...\" />\n    </Form.Group>\n    <Button variant=\"primary mb-3\" type=\"submit\">\n      Submit\n    </Button>\n  </Form>\n  );\n}\n\nfunction App() {\n  const [state, setState] = React.useState([\n  ]);\n\n  const refreshIntents = () => {\n    fetch('/intents')\n      .then(res => res.json())\n      .then(setState)\n  }\n\n  const addIntent = text => {\n    fetch('/intent', {\n      method: 'POST',\n      body: JSON.stringify({ \"intent\": text }),\n      headers: { 'Content-Type': 'application/json' },\n    })\n      .then(res => refreshIntents())\n  };\n\n  const removeIntent = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setState(newTodos);\n  };\n\n  refreshIntents()\n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        <h1 className=\"text-center mb-4\">Todo List</h1>\n        <p>Я съела ...</p>\n        <p>Я начала принимать ...</p>\n        <p>Голод ...</p>\n        <FormIntent addIntent={addIntent} />\n        <div>\n          {state.map((item, index) => (\n            <Card>\n              <Card.Body>\n                <Intent\n                key={index}\n                index={index}\n                intent={item}\n                removeIntent={removeIntent}\n                />\n              </Card.Body>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}